# OnchainRiddle - Project Rules

## Scope
This file defines global rules for the entire repository. For technology-specific rules, see the .cursorrules file in each subproject (Frontend, Backend, Blockchain).

## Project Overview
OnchainRiddle is a blockchain-based riddle game with AI-powered riddle generation. The project follows Domain-Driven Design (DDD) and Clean Architecture principles.

## Architecture Principles
- **Domain-Driven Design (DDD):**
  - Domain Layer: Core business logic and entities
  - Application Layer: Use cases and orchestration
  - Infrastructure Layer: External services and technical concerns
  - Presentation Layer: User interface and API endpoints
- **Clean Architecture:**
  - Dependencies point inward (Domain → Application → Infrastructure)
  - Business rules are independent of frameworks
  - External concerns are isolated in the infrastructure layer

## File Structure
```
on_chain_riddle/
├── Blockchain/          # Smart contracts and deployment
│   ├── contracts/       # Solidity contracts
│   ├── scripts/         # Deployment scripts
│   └── test/           # Contract tests
├── Frontend/           # React application
│   ├── src/
│   │   ├── infrastructure/
│   │   ├── presentation/
│   │   └── shared/
│   └── .cursorrules    # Frontend-specific rules
├── Backend/            # Node.js service
│   ├── src/
│   │   ├── domain/
│   │   ├── application/
│   │   ├── infrastructure/
│   │   └── presentation/
│   └── .cursorrules    # Backend-specific rules
└── .cursorrules        # This file (global rules)
```

## Global Coding Standards
- Use English for code, comments, and documentation
- Follow SOLID principles
- Write tests for all business logic
- Use meaningful variable and function names
- Keep functions small and focused
- Use kebab-case for files/folders, PascalCase for classes/components, camelCase for variables/functions, UPPER_SNAKE_CASE for constants
- Prefix booleans with is/has/can

## Testing
- Write tests in English
- Use Given-When-Then structure for test descriptions
- Test both happy path and edge cases
- Mock external dependencies
- Do not run tests in watch mode continuously

## Error Handling
- Use custom error classes for domain errors
- Log errors with appropriate context
- Return meaningful error messages to users
- Handle async errors with try/catch

## Security
- Never commit private keys or API keys
- Use environment variables for sensitive data
- Validate all user inputs
- Implement authentication and authorization as needed

## Git Workflow
- Use descriptive commit messages (conventional commits)
- Create feature branches for new functionality
- Review code before merging
- Keep commits atomic and focused

## Dependencies
- Keep dependencies up to date
- Use specific versions in package.json
- Audit dependencies regularly
- Prefer stable, well-maintained packages

## Documentation
- Write clear README files
- Document API endpoints
- Add JSDoc comments for complex functions
- Keep documentation up to date

## Performance
- Optimize database queries
- Use caching where appropriate
- Minimize blockchain calls
- Implement pagination
- Use lazy loading for components

## Deployment
- Use environment-specific configurations
- Implement health checks
- Set up monitoring
- Use CI/CD pipelines
- Backup data regularly 