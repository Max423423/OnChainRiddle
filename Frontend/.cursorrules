# OnchainRiddle Frontend - React & TypeScript Rules

> For global project rules, see the root .cursorrules file.

## Overview
This file defines rules and conventions for the React/TypeScript frontend of OnchainRiddle, following TDD and DDD principles.

## Architecture & File Structure
```
src/
├── infrastructure/
│   └── blockchain/      # Blockchain integration (ethers.js)
├── presentation/
│   ├── components/      # React components
│   ├── hooks/          # Custom React hooks
│   └── pages/          # Page components
└── shared/
    └── types/          # TypeScript type definitions
```

## Naming Conventions
- Components: PascalCase (e.g., RiddleGame.tsx)
- Hooks: camelCase with 'use' prefix (e.g., useWallet.ts)
- Services: camelCase with 'Service' suffix (e.g., riddleService.ts)
- Types: PascalCase (e.g., Riddle.ts)
- Constants: UPPER_SNAKE_CASE (e.g., API_ENDPOINTS.ts)
- Directories: kebab-case (e.g., shared/, presentation/)

## Development Guidelines
- Use TypeScript strict mode
- No `any` types
- Use interfaces and generics where appropriate
- Use React functional components and hooks
- Keep components pure and testable
- Separate business logic from UI logic
- Use custom hooks for reusable logic

## Testing
- Use Vitest and React Testing Library
- Write tests before implementation (TDD)
- Use Given-When-Then structure for test descriptions
- Mock external dependencies (API, blockchain)
- Maintain high test coverage (>90%)

## Blockchain Integration
- Use ethers.js for blockchain communication
- Handle transaction states (pending, success, failure)
- Provide user feedback for blockchain operations
- Support MetaMask and other wallets

## API Integration
- Use fetch or axios with error handling
- Handle loading and error states
- Use TypeScript for API types

## Security
- Validate all user inputs
- Sanitize data before API calls
- Prevent XSS attacks

## Performance
- Use React.memo for expensive components
- Implement proper loading states
- Optimize bundle size (code splitting, lazy loading)

## Getting Started
1. Install dependencies: `npm install`
2. Start dev server: `npm run dev`
3. Run tests: `npm test`
4. Build for production: `npm run build`

## Contributing
- Create a feature branch from main
- Write tests first (TDD)
- Implement the feature
- Ensure all tests pass
- Submit a pull request 